{"ast":null,"code":"var _jsxFileName = \"/Users/spaul/dev/london/my-app/src/DeathChart.tsx\";\nimport * as d3 from 'd3';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DeathChart = () => {\n  var margin = {\n    top: 50,\n    right: 50,\n    bottom: 50,\n    left: 50\n  },\n      width = window.innerWidth - margin.left - margin.right // Use the window's width \n  ,\n      height = window.innerHeight - margin.top - margin.bottom; // Use the window's height\n  // The number of datapoints\n\n  var n = 21; // 5. X scale will use the index of our data\n\n  var xScale = d3.scaleLinear().domain([0, n - 1]) // input\n  .range([0, width]); // output\n  // 6. Y scale will use the randomly generate number \n\n  var yScale = d3.scaleLinear().domain([0, 1]) // input \n  .range([height, 0]); // output \n  // 7. d3's line generator\n\n  var line = d3.line().x((d, i) => {\n    return xScale(i);\n  }) // set the x values for the line generator\n  .y(d => {\n    return yScale(d.y);\n  }) // set the y values for the line generator \n  .curve(d3.curveMonotoneX); // apply smoothing to the line\n  // 8. An array of objects of length N. Each object has key -> value pair, the key being \"y\" and the value is a random number\n\n  var dataset = d3.range(n).map(function (d) {\n    return {\n      \"y\": d3.randomUniform(1)()\n    };\n  }); // 1. Add the SVG to the page and employ #2\n\n  var svg = d3.select(\"#death-chart\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // 3. Call the x axis in a group tag\n\n  svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(xScale)); // Create an axis component with d3.axisBottom\n  // 4. Call the y axis in a group tag\n\n  svg.append(\"g\").attr(\"class\", \"y axis\").call(d3.axisLeft(yScale)); // Create an axis component with d3.axisLeft\n  // 9. Append the path, bind the data, and call the line generator \n\n  svg.append(\"path\").datum(dataset) // 10. Binds data to the line \n  .attr(\"class\", \"line\") // Assign a class for styling \n  //@ts-ignore\n  .attr(\"d\", line); // 11. Calls the line generator \n  // 12. Appends a circle for each datapoint \n\n  svg.selectAll(\".dot\").data(dataset).enter().append(\"circle\") // Uses the enter().append() method\n  .attr(\"class\", \"dot\") // Assign a class for styling\n  .attr(\"cx\", function (d, i) {\n    return xScale(i);\n  }).attr(\"cy\", function (d) {\n    return yScale(d.y);\n  }).attr(\"r\", 5).on(\"mouseover\", () => {\n    //@ts-ignore\n    this.attr('class', 'focus');\n  }).on(\"mouseout\", function () {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"death-chart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 12\n  }, this);\n};\n\n_c = DeathChart;\nexport default DeathChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeathChart\");","map":{"version":3,"names":["d3","React","DeathChart","margin","top","right","bottom","left","width","window","innerWidth","height","innerHeight","n","xScale","scaleLinear","domain","range","yScale","line","x","d","i","y","curve","curveMonotoneX","dataset","map","randomUniform","svg","select","append","attr","call","axisBottom","axisLeft","datum","selectAll","data","enter","on"],"sources":["/Users/spaul/dev/london/my-app/src/DeathChart.tsx"],"sourcesContent":["import * as d3 from 'd3';\nimport React from 'react';\n\nconst DeathChart = () => {\n\n    var margin = {top: 50, right: 50, bottom: 50, left: 50}\n    , width = window.innerWidth - margin.left - margin.right // Use the window's width \n    , height = window.innerHeight - margin.top - margin.bottom; // Use the window's height\n\n    // The number of datapoints\n    var n = 21;\n\n    // 5. X scale will use the index of our data\n    var xScale = d3.scaleLinear()\n        .domain([0, n-1]) // input\n        .range([0, width]); // output\n\n    // 6. Y scale will use the randomly generate number \n    var yScale = d3.scaleLinear()\n        .domain([0, 1]) // input \n        .range([height, 0]); // output \n\n    // 7. d3's line generator\n    var line = d3.line()\n        .x((d, i) => { return xScale(i); }) // set the x values for the line generator\n        .y((d:any) => { return yScale(d.y); }) // set the y values for the line generator \n        .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n    // 8. An array of objects of length N. Each object has key -> value pair, the key being \"y\" and the value is a random number\n    var dataset = d3.range(n).map(function(d) { return {\"y\": d3.randomUniform(1)() } })\n\n    // 1. Add the SVG to the page and employ #2\n    var svg = d3.select(\"#death-chart\").append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // 3. Call the x axis in a group tag\n    svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(xScale)); // Create an axis component with d3.axisBottom\n\n    // 4. Call the y axis in a group tag\n    svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .call(d3.axisLeft(yScale)); // Create an axis component with d3.axisLeft\n\n    // 9. Append the path, bind the data, and call the line generator \n    svg.append(\"path\")\n        .datum(dataset) // 10. Binds data to the line \n        .attr(\"class\", \"line\") // Assign a class for styling \n        //@ts-ignore\n        .attr(\"d\", line); // 11. Calls the line generator \n\n    // 12. Appends a circle for each datapoint \n    svg.selectAll(\".dot\")\n        .data(dataset)\n    .enter().append(\"circle\") // Uses the enter().append() method\n        .attr(\"class\", \"dot\") // Assign a class for styling\n        .attr(\"cx\", function(d, i) { return xScale(i) })\n        .attr(\"cy\", function(d) { return yScale(d.y) })\n        .attr(\"r\", 5)\n        .on(\"mouseover\", () => {\n            //@ts-ignore\n            this.attr('class', 'focus')\n        })\n        .on(\"mouseout\", function() {  })\n\n    return <div id=\"death-chart\">\n    </div>\n}\n\nexport default DeathChart;"],"mappings":"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"},"metadata":{},"sourceType":"module"}