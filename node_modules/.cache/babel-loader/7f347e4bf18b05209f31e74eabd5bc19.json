{"ast":null,"code":"var _jsxFileName = \"/Users/spaul/dev/london/my-app/src/DeathChart.tsx\",\n    _s = $RefreshSig$();\n\nimport * as d3 from 'd3';\nimport React, { useEffect } from 'react';\nimport useDeathDays from './DeathDays';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DeathChart = () => {\n  _s();\n\n  const deathDays = useDeathDays({});\n  useEffect(() => {\n    var margin = {\n      top: 50,\n      right: 50,\n      bottom: 50,\n      left: 50\n    },\n        width = window.innerWidth - margin.left - margin.right // Use the window's width \n    ,\n        height = window.innerHeight - margin.top - margin.bottom; // Use the window's height\n    // The number of datapoints\n\n    var n = 21; // 5. X scale will use the index of our data\n\n    var xScale = d3.scaleLinear().domain([0, n - 1]) // input\n    .range([0, width]); // output\n    // 6. Y scale will use the randomly generate number \n\n    var yScale = d3.scaleLinear().domain([0, 1]) // input \n    .range([height, 0]); // output \n    // 7. d3's line generator\n\n    var line = d3.line().x((d, i) => {\n      return xScale(i);\n    }) // set the x values for the line generator\n    .y(d => {\n      return yScale(d.date);\n    }) // set the y values for the line generator \n    .curve(d3.curveMonotoneX); // apply smoothing to the line\n    // 8. An array of objects of length N. Each object has key -> value pair, the key being \"y\" and the value is a random number\n    // var dataset = d3.range(n).map(function(d) { return {\"y\": d3.randomUniform(1)() } })\n    // 1. Add the SVG to the page and employ #2\n\n    var svg = d3.select(\"#death-chart\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // 3. Call the x axis in a group tag\n\n    svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(xScale)); // Create an axis component with d3.axisBottom\n    // 4. Call the y axis in a group tag\n\n    svg.append(\"g\").attr(\"class\", \"y axis\").call(d3.axisLeft(yScale)); // Create an axis component with d3.axisLeft\n    // 9. Append the path, bind the data, and call the line generator \n\n    svg.append(\"path\").datum(deathDays) // 10. Binds data to the line \n    .attr(\"class\", \"line\") // Assign a class for styling \n    //@ts-ignore\n    .attr(\"d\", line); // 11. Calls the line generator \n    // 12. Appends a circle for each datapoint \n\n    svg.selectAll(\".dot\").data(deathDays).enter().append(\"circle\") // Uses the enter().append() method\n    .attr(\"class\", \"dot\") // Assign a class for styling\n    .attr(\"cx\", function (d, i) {\n      return xScale(i);\n    }).attr(\"cy\", function (d) {\n      return yScale(d.date);\n    }).attr(\"r\", 5).on(\"mouseover\", () => {\n      //@ts-ignore\n      this.attr('class', 'focus');\n    }).on(\"mouseout\", function () {});\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"death-chart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 12\n  }, this);\n};\n\n_s(DeathChart, \"euxcpmU0HIqid/DhA35a77F13Tc=\", false, function () {\n  return [useDeathDays];\n});\n\n_c = DeathChart;\nexport default DeathChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeathChart\");","map":{"version":3,"names":["d3","React","useEffect","useDeathDays","DeathChart","deathDays","margin","top","right","bottom","left","width","window","innerWidth","height","innerHeight","n","xScale","scaleLinear","domain","range","yScale","line","x","d","i","y","date","curve","curveMonotoneX","svg","select","append","attr","call","axisBottom","axisLeft","datum","selectAll","data","enter","on"],"sources":["/Users/spaul/dev/london/my-app/src/DeathChart.tsx"],"sourcesContent":["import * as d3 from 'd3';\nimport React, { useEffect } from 'react';\nimport useDeathDays from './DeathDays';\n\nconst DeathChart = () => {\n    const deathDays = useDeathDays({});\n    useEffect(() => {\n        var margin = {top: 50, right: 50, bottom: 50, left: 50}\n        , width = window.innerWidth - margin.left - margin.right // Use the window's width \n        , height = window.innerHeight - margin.top - margin.bottom; // Use the window's height\n\n        // The number of datapoints\n        var n = 21;\n\n        // 5. X scale will use the index of our data\n        var xScale = d3.scaleLinear()\n            .domain([0, n-1]) // input\n            .range([0, width]); // output\n\n        // 6. Y scale will use the randomly generate number \n        var yScale = d3.scaleLinear()\n            .domain([0, 1]) // input \n            .range([height, 0]); // output \n\n        // 7. d3's line generator\n        var line = d3.line()\n            .x((d, i) => { return xScale(i); }) // set the x values for the line generator\n            .y((d:any) => { return yScale(d.date); }) // set the y values for the line generator \n            .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n        // 8. An array of objects of length N. Each object has key -> value pair, the key being \"y\" and the value is a random number\n        // var dataset = d3.range(n).map(function(d) { return {\"y\": d3.randomUniform(1)() } })\n\n        // 1. Add the SVG to the page and employ #2\n        var svg = d3.select(\"#death-chart\").append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        // 3. Call the x axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(xScale)); // Create an axis component with d3.axisBottom\n\n        // 4. Call the y axis in a group tag\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .call(d3.axisLeft(yScale)); // Create an axis component with d3.axisLeft\n\n        // 9. Append the path, bind the data, and call the line generator \n        svg.append(\"path\")\n            .datum(deathDays) // 10. Binds data to the line \n            .attr(\"class\", \"line\") // Assign a class for styling \n            //@ts-ignore\n            .attr(\"d\", line); // 11. Calls the line generator \n\n        // 12. Appends a circle for each datapoint \n        svg.selectAll(\".dot\")\n            .data(deathDays)\n        .enter().append(\"circle\") // Uses the enter().append() method\n            .attr(\"class\", \"dot\") // Assign a class for styling\n            .attr(\"cx\", function(d, i) { return xScale(i) })\n            .attr(\"cy\", function(d) { return yScale(d.date) })\n            .attr(\"r\", 5)\n            .on(\"mouseover\", () => {\n                //@ts-ignore\n                this.attr('class', 'focus')\n            })\n            .on(\"mouseout\", function() {  })\n    },[]);\n    return <div id=\"death-chart\">\n    </div>\n}\n\nexport default DeathChart;"],"mappings":"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"},"metadata":{},"sourceType":"module"}