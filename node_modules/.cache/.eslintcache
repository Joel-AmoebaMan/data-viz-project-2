[{"/Users/spaul/dev/london/my-app/src/index.tsx":"1","/Users/spaul/dev/london/my-app/src/reportWebVitals.ts":"2","/Users/spaul/dev/london/my-app/src/App.tsx":"3","/Users/spaul/dev/london/my-app/src/useWindowSize.tsx":"4","/Users/spaul/dev/london/my-app/src/Streets.ts":"5","/Users/spaul/dev/london/my-app/src/Pumps.ts":"6","/Users/spaul/dev/london/my-app/src/Deaths.ts":"7","/Users/spaul/dev/london/my-app/src/Legend.tsx":"8","/Users/spaul/dev/london/my-app/src/DeathChart.tsx":"9","/Users/spaul/dev/london/my-app/src/Map.tsx":"10","/Users/spaul/dev/london/my-app/src/State/Age.tsx":"11","/Users/spaul/dev/london/my-app/src/State/Sex.tsx":"12","/Users/spaul/dev/london/my-app/src/Filter.tsx":"13","/Users/spaul/dev/london/my-app/src/DeathsByAge.tsx":"14","/Users/spaul/dev/london/my-app/src/DeathsByGender.tsx":"15","/Users/spaul/dev/london/my-app/src/State/Date.tsx":"16","/Users/spaul/dev/london/my-app/src/DeathChartDeaths.ts":"17","/Users/spaul/dev/data-viz-project-2/src/index.tsx":"18","/Users/spaul/dev/data-viz-project-2/src/App.tsx":"19","/Users/spaul/dev/data-viz-project-2/src/useWindowSize.tsx":"20","/Users/spaul/dev/data-viz-project-2/src/Navbar.tsx":"21"},{"size":633,"mtime":1665538068230,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1663115640856,"results":"24","hashOfConfig":"23"},{"size":4771,"mtime":1666543664261,"results":"25","hashOfConfig":"23"},{"size":844,"mtime":1663427094809,"results":"26","hashOfConfig":"23"},{"size":442,"mtime":1663809499647,"results":"27","hashOfConfig":"23"},{"size":272,"mtime":1665541158378,"results":"28","hashOfConfig":"23"},{"size":1205,"mtime":1666311866162,"results":"29","hashOfConfig":"23"},{"size":1177,"mtime":1666539475764,"results":"30","hashOfConfig":"23"},{"size":5152,"mtime":1666539477213,"results":"31","hashOfConfig":"23"},{"size":15202,"mtime":1666541401370,"results":"32","hashOfConfig":"23"},{"size":335,"mtime":1665540003055,"results":"33","hashOfConfig":"23"},{"size":198,"mtime":1665538595069,"results":"34","hashOfConfig":"23"},{"size":2464,"mtime":1666543760568,"results":"35","hashOfConfig":"23"},{"size":3833,"mtime":1666539475763,"results":"36","hashOfConfig":"23"},{"size":3783,"mtime":1666539475763,"results":"37","hashOfConfig":"23"},{"size":218,"mtime":1666307017858,"results":"38","hashOfConfig":"23"},{"size":1099,"mtime":1666311817408,"results":"39","hashOfConfig":"23"},{"size":633,"mtime":1667771095191,"results":"40","hashOfConfig":"41"},{"size":2639,"mtime":1667771687296,"results":"42","hashOfConfig":"41"},{"size":844,"mtime":1667765328035,"results":"43","hashOfConfig":"41"},{"size":4968,"mtime":1667771754832,"results":"44","hashOfConfig":"41"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"fld10c",{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"b3fkju",{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/spaul/dev/london/my-app/src/index.tsx",[],[],[],"/Users/spaul/dev/london/my-app/src/reportWebVitals.ts",[],[],"/Users/spaul/dev/london/my-app/src/App.tsx",["118"],[],"import * as React from 'react';\nimport { styled, createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Box from '@mui/material/Box';\nimport MuiAppBar, { AppBarProps as MuiAppBarProps } from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport IconButton from '@mui/material/IconButton';\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Map from './Map';\nimport useStreets, { StreetType } from './Streets';\nimport usePumps from './Pumps';\nimport useDeaths from './Deaths';\nimport Legend from './Legend';\nimport { Divider } from '@mui/material';\nimport DeathChart from './DeathChart';\nimport Filter from './Filter';\nimport DeathsByAge from './DeathsByAge';\nimport DeathsByGender from './DeathsByGender';\nimport useDeathChartDeaths from './DeathChartDeaths';\n\n\ninterface AppBarProps extends MuiAppBarProps {\n  open?: boolean;\n}\n\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== 'open',\n})<AppBarProps>(({ theme, open }) => ({\n  zIndex: theme.zIndex.drawer + 1,\n  transition: theme.transitions.create(['width', 'margin'], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  ...(open && {\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  }),\n}));\n\nconst mdTheme = createTheme();\n\nfunction DashboardContent() {\n  const [open, setOpen] = React.useState(false);\n  const streets = useStreets({});\n  const pumps = usePumps();\n  const deaths = useDeaths();\n  const deathChartDeaths = useDeathChartDeaths();\n  const toggleDrawer = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <ThemeProvider theme={mdTheme}>\n      <Box sx={{ display: 'flex' }}>\n        <CssBaseline />\n        <AppBar position=\"absolute\" open={open}>\n          <Toolbar\n            sx={{\n              pr: '24px', // keep right padding when drawer closed\n            }}\n          >\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={toggleDrawer}\n              sx={{\n                marginRight: '36px',\n                ...(open && { display: 'none' }),\n              }}\n            >\n              \n            </IconButton>\n            <Typography\n              component=\"h1\"\n              variant=\"h6\"\n              color=\"inherit\"\n              noWrap\n              sx={{ flexGrow: 1 }}\n            >\n              1854 Broad Street Cholera Outbreak\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Box\n          component=\"main\"\n          sx={{\n            backgroundColor: (theme) =>\n              theme.palette.mode === 'light'\n                ? theme.palette.grey[100]\n                : theme.palette.grey[900],\n            flexGrow: 1,\n            height: '100vh',\n            overflow: 'auto',\n          }}\n        >\n          <Toolbar />\n          <Container maxWidth={false} sx={{ mt: 4, mb: 4 }}>\n            <Grid container spacing={3}>\n              {/* Chart */}\n              <Grid item xs={12} md={8}>\n                <Paper sx={{ p: 2}}>\n                  <label>Broad Street Map</label>\n                  <Legend/>\n                  <Map \n                    streets={streets}\n                    pumps={pumps}\n                    deaths={deaths}\n                  />\n                </Paper>\n              </Grid>\n              {/* Recent Deposits */}\n              <Grid item xs={12} md={4}>\n                <Paper\n                  sx={{\n                    p: 2,\n                    display: 'flex',\n                    flexDirection: 'column',\n                  }}\n                >\n                  <Filter/>\n                </Paper>\n                <br/>\n                <Paper\n                  sx={{\n                    p: 2,\n                    display: 'flex',\n                    flexDirection: 'column',\n                  }}\n                >\n                  <label>Deaths by Day</label>\n                  <DeathChart deaths={deathChartDeaths}/>\n                  <Divider/>\n                  <label>Deaths by Age</label>\n                  <DeathsByAge deaths={deaths}/>\n                  <Divider/>\n                  <label>Deaths by Gender</label>\n                  <DeathsByGender deaths={deaths}/>\n                </Paper>\n              </Grid>\n            </Grid>\n          </Container>\n        </Box>\n      </Box>\n    </ThemeProvider>\n  );\n}\n\nexport default function Dashboard() {\n  return <DashboardContent />;\n}","/Users/spaul/dev/london/my-app/src/useWindowSize.tsx",[],[],"/Users/spaul/dev/london/my-app/src/Streets.ts",["119"],[],"import { useEffect, useState } from 'react';\nimport StreetsFile from './assets/streets.json';\n\ntype Props = {\n\n}\n\nexport type CoordinateType = {\n    x: number;\n    y: number;\n}\n\nexport type StreetType = Array<CoordinateType>;\n\nconst useStreets = (props: Props) => {\n    const [ streets, setStreets ] = useState<Array<StreetType>>(StreetsFile);\n\n    useEffect(() => {\n        \n    },[props]);\n\n    return streets;\n}\n\nexport default useStreets;","/Users/spaul/dev/london/my-app/src/Pumps.ts",["120"],[],"import { useEffect, useState } from 'react';\nimport PumpsFile from './assets/pumps.json';\nimport { CoordinateType } from './Streets';\n\nconst usePumps = () => {\n    const [ pumps ] = useState<Array<CoordinateType>>(PumpsFile);\n\n    return pumps;\n}\n\nexport default usePumps;","/Users/spaul/dev/london/my-app/src/Deaths.ts",[],[],"/Users/spaul/dev/london/my-app/src/Legend.tsx",[],[],"/Users/spaul/dev/london/my-app/src/DeathChart.tsx",["121","122","123"],[],"import * as d3 from 'd3';\nimport moment from 'moment';\nimport React, { memo, useEffect, useRef, useState } from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport TheDate from './State/Date';\n\ntype Props = {\n    deaths: any;\n}\n\nconst DeathChart = memo((props: Props) => {\n    const margin = {top: 10, right: 20, bottom: 30, left: 30},\n            height = 200 - margin.top - margin.bottom;\n    let svg = useRef(d3.selectAll(\"div\"));\n    const setDate = useSetRecoilState(TheDate);\n    const [ deaths, setDeaths ] = useState<{date: string, deaths: number}[]>([]);\n\n    useEffect(() => {\n        const deathDays: {[key: string]: number} = {};\n\n        for (const d of props.deaths) {\n            if (!deathDays.hasOwnProperty(d.date)) {\n                deathDays[d.date] = 1;\n            } else {\n                deathDays[d.date]++;\n            }\n        }\n        \n        \n        const DeathDays = Object.entries(deathDays).map(([k,v]) => ({\n            date: k,\n            deaths: v\n        }));\n        \n        setDeaths(DeathDays);\n    },[props.deaths]);\n\n    \n    let x: any;\n    let y: any;\n\n    const graph = () => {\n        let formatValue = d3.format(\",\");\n\n        if (svg.current) {\n            svg.current.append(\"path\")\n            .datum(deaths)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#DC3220\")\n            .attr(\"stroke-width\", 1.5)\n            //@ts-ignore\n            .attr(\"d\", d3.line()\n                .x((d: any) => x(d3.timeParse(\"%Y-%m-%d\")(d.date)))\n                .y((d: any) => y(d.deaths))\n            )\n\n        var focus = svg.current.append(\"g\")\n            .attr(\"class\", \"focus\")\n            .style(\"display\", \"none\");\n\n        const mousemove = (e:any) => {\n            const x0 = x.invert(d3.pointer(e)[0]);\n            const res = deaths.find((element) => moment(element.date).format('Y-M-D') === moment(x0).format('Y-M-D'));\n            if (res) {\n                setDate(res.date)\n                focus.attr(\"transform\", \"translate(\" + x(d3.timeParse(\"%Y-%m-%d\")(res.date)) + \",\" + y(res.deaths) + \")\");\n                focus.select(\".tooltip-date\").text(res.date);\n                focus.select(\".tooltip-likes\").text(formatValue(res.deaths));\n            }\n            \n        }\n\n        focus.append(\"circle\")\n            .attr(\"r\", 5);\n\n        focus.append(\"rect\")\n            .attr(\"class\", \"tooltip\")\n            .attr(\"width\", 100)\n            .attr(\"height\", 50)\n            .attr(\"x\", 10)\n            .attr(\"y\", -22)\n            .attr(\"rx\", 4)\n            .attr(\"ry\", 4)\n            .style(\"position\", \"absolute\")\n            .style(\"zIndex\", 100);\n\n        focus.append(\"text\")\n            .attr(\"class\", \"tooltip-date\")\n            .attr(\"x\", 18)\n            .attr(\"y\", -2);\n\n        focus.append(\"text\")\n            .attr(\"x\", 18)\n            .attr(\"y\", 18)\n            .text(\"Deaths:\");\n\n        focus.append(\"text\")\n            .attr(\"class\", \"tooltip-likes\")\n            .attr(\"x\", 75)\n            .attr(\"y\", 18);\n\n        var chart = d3.selectAll('#death-chart');\n        //@ts-ignore\n        var width = chart.node().getBoundingClientRect().width - 90;\n        svg.current.append(\"rect\")\n            .attr(\"class\", \"overlay\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .on(\"mouseover\", function() { focus.style(\"display\", null); setDate(null); })\n            .on(\"mouseout\", function() { focus.style(\"display\", \"none\"); setDate(null); })\n            .on(\"mousemove\", mousemove);\n        }\n    }\n\n    const draw = () => {\n        var s = d3.selectAll('#death-chart svg g');\n        var chart = d3.selectAll('#death-chart');\n        s = s.remove();\n        //@ts-ignore\n        var width = chart.node().getBoundingClientRect().width - 90;\n        //@ts-ignore\n        svg.current = d3.select(\"#death-chart svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        const dates = deaths.map(d => new Date(d.date));\n        const domain = d3.extent(dates);\n        x = d3.scaleTime()\n        //@ts-ignore\n        .domain(domain)\n        .range([ 0, width ]);\n\n        const xAxis = d3.axisBottom(x);\n\n        svg.current.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        //@ts-ignore\n        .call(xAxis.ticks(d3.timeDay.every(4)).tickFormat(d3.timeFormat('%m/%d')));\n\n        y = d3.scaleLinear()\n        //@ts-ignore\n        .domain([0, d3.max(deaths, (d) => +d.deaths + 20)])\n        .range([ height, 0 ]);\n\n        svg.current.append(\"g\")\n        .call(d3.axisLeft(y));\n\n        graph();\n    }\n\n    useEffect(() => {\n        draw();\n        \n        d3.select(window)\n            .on(\"resize\", function() {\n                draw();\n            });\n    },[deaths]);\n\n    useEffect(() => {\n        graph();\n    },[]);\n\n    return (\n        <div id=\"death-chart\" style={{ overflow: 'visible' }}>\n            <svg width=\"100%\" style={{ overflow: 'visible' }}></svg>\n        </div>\n    )\n});\n\nexport default DeathChart;","/Users/spaul/dev/london/my-app/src/Map.tsx",["124","125","126","127","128","129","130"],[],"import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from \"d3\";\nimport useWindowSize from './useWindowSize';\n\nconst margin = {top: 10, right: 60, bottom: 10, left: 0}\n\ntype Props = {\n    streets: any;\n    pumps: any;\n    deaths: any;\n}\n\nconst Map = (props: Props) => {\n    const paperRef = useRef<HTMLElement | null>();\n    const d3Ref = useRef(d3.selectAll(\"#paper-plane svg g\"));\n    const windowSize = useWindowSize();\n    const [ width, setWidth ] = useState(500);\n    let streets: d3.Selection<d3.BaseType, unknown, d3.BaseType, unknown>;\n    let pumps: d3.Selection<d3.BaseType, unknown, d3.BaseType, unknown>;\n    let deaths: d3.Selection<d3.BaseType, unknown, d3.BaseType, unknown>;\n    let xScale = d3.scaleLinear().domain([0, 20]).range([0, 1000 - margin.left - margin.right]);\n    let yScale = d3.scaleLinear().domain([0, 20]).range([1000 - margin.top - margin.bottom, 0]);\n    let tooltip: any = null;\n    \n\n    useEffect(() => {\n        createMap();\n    }, []);\n\n    useEffect(() => {\n        \n        paperRef.current = document.getElementById(\"paper-plane\");\n        if (paperRef.current) {\n            xScale = d3.scaleLinear().domain([0, 20]).range([0, paperRef.current.clientWidth - margin.left - margin.right]);\n            yScale = d3.scaleLinear().domain([0, 20]).range([paperRef.current.clientWidth - margin.top - margin.bottom, 0]);\n            d3Ref.current\n                .attr(\"width\", paperRef.current.clientWidth)\n                .attr(\"height\", paperRef.current.clientWidth)\n            setWidth(paperRef.current.clientWidth);\n        }\n    },[windowSize.width, windowSize.height]);\n\n    useEffect(() => {\n        tooltip = d3.select(\"#tooltip\")\n            .append(\"div\")\n            .style(\"position\", \"absolute\")\n            .style(\"visibility\", \"hidden\")\n            .style(\"padding\", \"10px\")\n            .style(\"border-radius\", \"5px\")\n            .style(\"zIndex\", 100)\n            .style(\"background\", \"gray\")\n            .style(\"color\", \"white\")\n            .style(\"height\", \"70px\")\n            .style(\"width\", \"150px\")\n            .text(\"\");\n    }, []);\n\n    const mouseOver = (_: any, l: any) => {\n        const gender = l.gender ? 'Female' : 'Male';   \n        return tooltip.style(\"visibility\", \"visible\").html(`\n            <b>Age</b>: ${l.age}\n            <br/>\n            <b>Gender</b>: ${gender}\n        `)\n    }\n\n    const mouseMove = (d: any) => tooltip.style(\"top\", (d.y - 90)+\"px\").style(\"left\",(d.x - 15)+\"px\");\n\n    const mouseOut = () => tooltip.style(\"visibility\", \"hidden\");\n\n    const createMap = () => {\n        d3Ref.current = d3.selectAll(\"#paper-plane svg g\")\n\n        const lol = d3.selectAll(\"#paper-plane svg\")\n        //@ts-ignore\n        .call(d3.zoom().scaleExtent([1, 2]).on(\"zoom\", function (e) {\n            lol.attr(\"transform\", e.transform);\n        }));\n        \n        // streets\n        streets = d3Ref.current.selectAll('polygon')\n            .data(props.streets)\n            .enter()\n            .append(\"polygon\")\n            .style(\"stroke\", \"lightgray\")\n            .style(\"fill\", \"lightgray\")\n            .style(\"stroke-width\", 10)\n            .style(\"z-index\", 0)\n            .attr(\"points\", (d: any) => {\n                let points = \"\";\n                d.forEach((_: any, i: string | number) => points += `${xScale(d[i].x)}, ${yScale(d[i].y)} `);\n                return points;\n            }) as any;\n\n        d3Ref.current.selectAll(\"text\")\n            .data([\n                {\n                    street: 'Margaret Street',\n                    x: 3.5,\n                    y: 16.5,\n                    rotate: -17,\n                },\n                {\n                    street: 'Princes Street',\n                    x: 4.5,\n                    y: 22.3,\n                    rotate: 63\n                },\n                {\n                    street: 'Recent Street',\n                    x: 4,\n                    y: 24.75,\n                    rotate: 78\n                },\n                {\n                    street: 'Recent Street',\n                    x: 7,\n                    y: 24.8,\n                    rotate: 78\n                },\n                {\n                    street: 'Recent Street',\n                    x: 11,\n                    y: 22.55,\n                    rotate: 63\n                },\n                {\n                    street: 'Recent Street',\n                    x: 15,\n                    y: 22.65,\n                    rotate: 63\n                },\n                {\n                    street: 'New Bond Street',\n                    x: 15,\n                    y: 16.4,\n                    rotate: 58\n                },\n                {\n                    street: 'John Street',\n                    x: 4,\n                    y: 26.31,\n                    rotate: 76\n                },\n                {\n                    street: 'Castle Street',\n                    x: 4.8,\n                    y: 15.35,\n                    rotate: -16\n                },\n                {\n                    street: 'Princes Street',\n                    x: 2.5,\n                    y: 12.4,\n                    rotate: -18\n                },\n                {\n                    street: 'Hanover Street',\n                    x: 2.5,\n                    y: 10.8,\n                    rotate: -18\n                },\n                {\n                    street: 'Maddox Street',\n                    x: -4.5,\n                    y: 9.7,\n                    rotate: -55\n                },\n                {\n                    street: 'Conduit Street',\n                    x: -6.5,\n                    y: 8.4,\n                    rotate: -55\n                },\n                {\n                    street: 'Clifford Street',\n                    x: -4.2,\n                    y: 4.6,\n                    rotate: -35\n                },\n                {\n                    street: 'Burlington Gardens',\n                    x: -3,\n                    y: 1.7,\n                    rotate: -31\n                },\n                {\n                    street: 'Vigo Street',\n                    x: 4,\n                    y: 1.8,\n                    rotate: -20\n                },\n                {\n                    street: 'Merylborne Street',\n                    x: 15,\n                    y: 6.75,\n                    rotate: 8\n                },\n                {\n                    street: 'Tichborne Street',\n                    x: 18,\n                    y: 6.65,\n                    rotate: 8\n                },\n                {\n                    street: 'Coventry Street',\n                    x: 14,\n                    y: 0.3,\n                    rotate: -15\n                },\n                {\n                    street: 'King Street',\n                    x: 9.5,\n                    y: -0.1,\n                    rotate: -33\n                },\n                {\n                    street: 'Argyll Street',\n                    x: 8.5,\n                    y: 23.95,\n                    rotate: 63\n                },\n                {\n                    street: 'Blenheim Street',\n                    x: 8,\n                    y: 27.2,\n                    rotate: 68\n                },\n                {\n                    street: 'Poland Street',\n                    x: 9,\n                    y: 29.2,\n                    rotate: 68\n                },\n                {\n                    street: 'Berwick Street',\n                    x: 9,\n                    y: 30.1,\n                    rotate: 65\n                },\n                {\n                    street: 'Argyll Place',\n                    x: 2.25,\n                    y: 9.55,\n                    rotate: -30\n                },\n                {\n                    street: 'Great Maralborough Street',\n                    x: 5.25,\n                    y: 9.85,\n                    rotate: -25\n                },\n                {\n                    street: 'Work House',\n                    x: 7,\n                    y: 8.85,\n                    rotate: -25\n                },\n                {\n                    street: 'Broad Street',\n                    x: 8.5,\n                    y: 6.55,\n                    rotate: -25\n                },\n                {\n                    street: 'Oxford Street',\n                    x: 4.8,\n                    y: 14.15,\n                    rotate: -13\n                },\n                {\n                    street: 'Oxford Street',\n                    x: 10,\n                    y: 14,\n                    rotate: -13\n                },\n                {\n                    street: 'Oxford Street',\n                    x: 15,\n                    y: 13.85,\n                    rotate: -13\n                },\n                {\n                    street: 'Market Row',\n                    x: 6.75,\n                    y: 14.7,\n                    rotate: -15\n                },\n                {\n                    street: 'Market Place',\n                    x: 4,\n                    y: 28.15,\n                    rotate: 76,\n                    fontSize: 8,\n                },\n                {\n                    street: 'Market Street',\n                    x: 5.15,\n                    y: 28.055,\n                    rotate: 76,\n                    fontSize: 8,\n                },\n                {\n                    street: 'Winsley Street',\n                    x: 5.7,\n                    y: 28.7,\n                    rotate: 70,\n                    fontSize: 8,\n                },\n                {\n                    street: 'Adam & Eve Court',\n                    x: 5.8,\n                    y: 30.08,\n                    rotate: 70,\n                    fontSize: 8,\n                },\n                {\n                    street: 'Wells Street',\n                    x: 6,\n                    y: 30.68,\n                    rotate: 70,\n                },\n                {\n                    street: 'Berners Street',\n                    x: 6.2,\n                    y: 31.85,\n                    rotate: 70,\n                    fontSize: 8\n                },\n                {\n                    street: 'Newman Street',\n                    x: 6.8,\n                    y: 33.5,\n                    rotate: 70,\n                    fontSize: 8\n                },\n                {\n                    street: 'Rathbone Place',\n                    x: 9,\n                    y: 35,\n                    rotate: 65,\n                    fontSize: 5\n                },\n                {\n                    street: 'Charles Street',\n                    x: 10,\n                    y: 35,\n                    rotate: 65,\n                },\n                {\n                    street: 'Dean Street',\n                    x: 10,\n                    y: 33.4,\n                    rotate: 65,\n                },\n                {\n                    street: 'Dean Street',\n                    x: 13,\n                    y: 33.3,\n                    rotate: 65,\n                },\n                {\n                    street: 'Dean Street',\n                    x: 16,\n                    y: 33.2,\n                    rotate: 65,\n                },\n                {\n                    street: 'Princes Street',\n                    x: 20.5,\n                    y: 31.6,\n                    rotate: 65,\n                },\n                {\n                    street: 'Brewery',\n                    x: 14.25,\n                    y: 29.3,\n                    rotate: 65,\n                }\n            ]).enter()\n            .append('text')\n            .attr(\"x\", (d) => xScale(d.x))\n            .attr(\"y\", (d) => yScale(d.y))\n            .attr(\"dy\", \".35em\")\n            .style(\"transform\", (d) => `rotate(${d.rotate}deg)`)\n            .style(\"font-size\", (d) => d.fontSize || 10)\n            .text((d) => d.street);\n\n        //pumps\n        pumps = d3Ref.current.selectAll('image')\n            .data(props.pumps)\n            .enter()\n            .append('image')\n            .attr(\"href\", '/icons8-water-48.png')\n            .style(\"z-index\", 2)\n            .attr(\"height\", \"20\")\n            .attr(\"width\", \"20\")\n            .attr(\"x\", (d:any) => xScale(d.x))\n            .attr(\"y\", (d:any) => yScale(d.y)) as any;\n        \n        deaths = d3Ref.current.selectAll('text')\n            .data(props.deaths)\n            .enter()\n            .append(\"circle\")\n            .style(\"fill\", \"#DC3220\")\n            .style(\"r\", 4)\n            .attr(\"cx\", (d:any) => xScale(d.x))\n            .attr(\"cy\", (d:any) => yScale(d.y))\n            .attr(\"class\", 'death')\n            .style(\"z-index\", 1)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", mouseOver)\n            .on(\"mousemove\", mouseMove)\n            .on(\"mouseleave\", mouseOut) as any\n    }\n\n    useEffect(() => {\n        if (streets && pumps && deaths) {\n            streets.attr(\"points\", (d:any) => {\n                let points = \"\";\n                d.forEach((_:any, i: number) => points += `${xScale(d[i].x)}, ${yScale(d[i].y)} `);\n                return points;\n            });\n            deaths.attr(\"cx\", (d:any) => xScale(d.x))\n            .attr(\"cy\", (d:any) => yScale(d.y))\n            pumps.attr(\"x\", (d:any) => xScale(d.x))\n            .attr(\"y\", (d:any) => yScale(d.y))\n        }\n    },[windowSize.width]);\n\n    useEffect(() => {\n        try {\n            tooltip = d3.select(\"#tooltip\")\n            .append(\"div\")\n            .style(\"position\", \"absolute\")\n            .style(\"visibility\", \"hidden\")\n            .style(\"padding\", \"10px\")\n            .style(\"border-radius\", \"5px\")\n            .style(\"zIndex\", 100)\n            .style(\"background\", \"gray\")\n            .style(\"color\", \"white\")\n            .style(\"height\", \"70px\")\n            .style(\"width\", \"150px\")\n            .text(\"\");\n\n            const ds = d3Ref.current.selectAll('.death')\n            ds.remove();\n            deaths = d3Ref.current.selectAll('.death')\n                .data(props.deaths)\n                .enter()\n                .append(\"circle\")\n                .style(\"fill\", \"#DC3220\")\n                .style(\"r\", 4)\n                .attr(\"cx\", (d:any) =>  xScale(d.x))\n                .attr(\"cy\", (d:any) => yScale(d.y))\n                .attr(\"class\", 'death')\n                .style(\"z-index\", 1)\n                .style(\"cursor\", \"pointer\")\n                .on(\"mouseover\", mouseOver)\n                .on(\"mousemove\", mouseMove)\n                .on(\"mouseleave\", mouseOut) as any\n        } catch (e) {\n            console.log(e);\n        }\n    },[props.deaths])\n\n    return <>\n        <div style={{ position: 'absolute', zIndex: 2 }}>\n            <div id=\"tooltip\"></div>\n        </div>\n        <div\n            id=\"paper-plane\"\n            style={{\n                // p: 2,\n                display: 'flex',\n                flexDirection: 'column',\n                height: width,\n                position: 'relative',\n                zIndex: 1,\n                overflow: \"hidden\",\n            }}\n        >\n            <svg height=\"100%\" style={{cursor: 'move'}}>\n                <g height=\"100%\">\n                </g>\n            </svg>\n        </div>\n    </>;\n}\n\nexport default Map;","/Users/spaul/dev/london/my-app/src/State/Age.tsx",[],[],"/Users/spaul/dev/london/my-app/src/State/Sex.tsx",[],[],"/Users/spaul/dev/london/my-app/src/Filter.tsx",["131","132","133","134"],[],"import React from 'react';\nimport { FormControl, FormControlLabel, FormLabel, InputLabel, MenuItem, Radio, RadioGroup, Select, Slider } from '@mui/material';\nimport { useRecoilState } from 'recoil';\nimport Sex from './State/Sex';\nimport Age from './State/Age';\nimport Typography from '@mui/material/Typography';\nimport DeathsFile from './assets/deaths.json';\n\nconst ages = DeathsFile.map(d => d.age);\n\nconst Filter = () => {\n    const [ sex, setSex ] = useRecoilState(Sex);\n    const [ age, setAge ] = useRecoilState(Age);\n\n    return (\n        <>\n            <FormControl fullWidth>\n                <Typography id=\"input-slider\" gutterBottom>\n                    Gender\n                </Typography>\n                <RadioGroup\n                    row\n                    aria-labelledby=\"demo-radio-buttons-group-label\"\n                    name=\"Gender\"\n                    value={sex}\n                    onChange={(e) => {\n                        setSex(parseInt(e.target.value) as any);\n                    }}\n                >\n                    <FormControlLabel value={-1} control={<Radio />} label=\"All\" />\n                    <FormControlLabel value={1} control={<Radio />} label=\"Female\" />\n                    <FormControlLabel value={0} control={<Radio />} label=\"Male\" />\n                </RadioGroup>\n            </FormControl>\n            <br/>\n            <FormControl fullWidth>\n                <Typography id=\"input-slider\" gutterBottom>\n                    Age Range\n                </Typography>\n                <Slider\n                    getAriaLabel={() => 'Age Range'}\n                    disableSwap\n                    value={[age.min, age.max]}\n                    onChange={(e) => {\n                        //@ts-ignore\n                        setAge({min: e.target?.value[0] as number, max: e?.target?.value[1]})\n                    }}\n                    min={Math.min(...ages)}\n                    max={Math.max(...ages)}\n                    valueLabelDisplay={\"auto\"}\n                    marks={[\n                        {\n                            value: Math.min(...ages),\n                            label: Math.min(...ages)\n                        },\n                        {\n                            value: Math.max(...ages),\n                            label: Math.max(...ages),\n                        }\n                    ]}\n                />\n            </FormControl>\n        </>\n    );\n}\n\nexport default Filter;","/Users/spaul/dev/london/my-app/src/DeathsByAge.tsx",["135"],[],"import * as d3 from 'd3';\nimport React, { useEffect, useState } from 'react';\n\ntype Props = {\n    deaths: any;\n}\n\nconst DeathsByAge = (props: Props) => {\n    const margin = 200, height = 300 - margin;  \n    const [ deaths, setDeaths ] = useState<{age: string, count: number}[]>([]);\n    \n    let xScale = d3.scaleBand().range([0, 300]).padding(0.4),\n    yScale = d3.scaleLinear().range([height, 0]);\n    let tooltip: any = null;\n\n    useEffect(() => {\n        const deathDistAge: {[key: number]: number} = {};\n\n        for (const d of props.deaths) {\n            if (!deathDistAge.hasOwnProperty(d.age)) {\n                deathDistAge[d.age] = 1;\n            } else {\n                deathDistAge[d.age]++;\n            }\n        }\n        \n        \n        const DeathDistAge = Object.entries(deathDistAge).map(([k,v]) => ({\n            age: k,\n            count: v\n        }));\n\n        setDeaths(DeathDistAge)\n    },[props.deaths]);\n    \n    const mouseOver = (_: any, l: any) => {\n        return tooltip.style(\"visibility\", \"visible\").html(`\n            <b>Age</b>: ${l.age}\n            <br/>\n            <b>Deaths</b>: ${l.count}\n        `).style(\"top\", (_.clientY)+\"px\").style(\"left\",(_.clientX)+\"px\")\n    }\n\n    const mouseOut = () => tooltip.style(\"visibility\", \"hidden\");\n\n    const draw = () => {\n        const chart = d3.selectAll('#death-distribution svg')\n        chart.selectAll('g').remove();\n        chart.selectAll('.bar').remove();\n        //@ts-ignore\n        const chartWidth = chart.node().getBoundingClientRect().width - 90;\n\n        var g =  d3.selectAll('#death-distribution svg')\n               .attr(\"transform\", \"translate(\" + 60 + \",\" + 30 + \")\");\n\n        xScale.domain(deaths.map((d) => d.age.toString() ));\n        yScale.domain([0, d3.max(deaths, (d) => d.count as any )] as any);\n\n        g.append(\"g\")\n         .attr(\"transform\", \"translate(0,\" + height + \")\")\n         .call(d3.axisBottom(xScale))\n         .append(\"text\")\n         .attr(\"y\", height - 250)\n         .attr(\"x\", chartWidth - 100)\n         .attr(\"text-anchor\", \"end\")\n         .text(\"Age\");\n\n        g.append(\"g\")\n         .call(d3.axisLeft(yScale).tickFormat(function(d){\n             return d as any;\n         })\n         .ticks(6))\n         .append(\"text\")\n         .attr(\"transform\", \"rotate(-90)\")\n         .attr(\"y\", 4)\n         .attr(\"dy\", \"-5.1em\")\n         .attr(\"text-anchor\", \"end\")\n         .attr(\"stroke\", \"black\")\n        \n\n        g.selectAll(\".bar\")\n            .data(deaths)\n            .enter().append(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", (d) => xScale(d.age.toString()) as any)\n            .attr(\"y\", (d) => yScale(d.count))\n            .attr(\"width\", xScale.bandwidth())\n            .attr(\"height\", (d) => height - yScale(d.count)).attr('fill', '#DC3220')\n            .on(\"mouseenter\", mouseOver)\n            .on(\"mouseleave\", mouseOut) as any\n\n        tooltip = d3.select(\"#tooltip-here\")\n            .append(\"div\")\n            .style(\"position\", \"absolute\")\n            .style(\"visibility\", \"hidden\")\n            .style(\"padding\", \"10px\")\n            .style(\"border-radius\", \"5px\")\n            .style(\"zIndex\", 100)\n            .style(\"background\", \"gray\")\n            .style(\"color\", \"white\")\n            .style(\"height\", \"70px\")\n            .style(\"width\", \"150px\")\n            .text(\"\");\n    }\n\n    useEffect(() => {\n        draw();\n        \n        d3.select(window)\n            .on(\"resize\", function() {\n                draw();\n            });\n    },[deaths]);\n\n    return (\n        <>\n            <div id=\"tooltip-here\" style={{zIndex: 1}}></div>\n            <div id=\"death-distribution\" style={{ overflow: 'visible' }}>\n                <svg width=\"100%\" style={{ overflow: 'visible' }}>\n                </svg>\n            </div>\n        </>\n    )\n}\n\nexport default DeathsByAge;","/Users/spaul/dev/london/my-app/src/DeathsByGender.tsx",["136"],[],"import * as d3 from 'd3';\nimport React, { useEffect, useState } from 'react';\n\ntype Props = {\n    deaths: any;\n}\n\nconst DeathsByGender = (props: Props) => {\n    const height = 120\n    const [ deaths, setDeaths ] = useState<{gender: string, count: number}[]>([]);\n\n    \n    let xScale = d3.scaleBand().range([0, 300]).padding(0.4),\n    yScale = d3.scaleLinear().range([height, 0]);\n\n    let tooltip: any = d3.select(\"#tooltip-there\")\n        .append(\"div\")\n        .style(\"position\", \"absolute\")\n        .style(\"visibility\", \"hidden\")\n        .style(\"padding\", \"10px\")\n        .style(\"border-radius\", \"5px\")\n        .style(\"zIndex\", 100)\n        .style(\"background\", \"gray\")\n        .style(\"color\", \"white\")\n        .style(\"height\", \"70px\")\n        .style(\"width\", \"150px\")\n        .text(\"\");\n\n    useEffect(() => {\n        const deathDistGender: {[key: number]: number} = {0: 0, 1: 0};\n\n        for (const d of props.deaths) {\n            deathDistGender[d.gender]++;\n        }\n\n        const DeathDistGender = [\n            {\n                gender: 'Male',\n                count: deathDistGender[1]\n            },\n            {\n                gender: 'Female',\n                count: deathDistGender[0]\n            }\n        ];\n\n        setDeaths(DeathDistGender)\n    },[props.deaths]);\n\n    const mouseOver = (_: any, l: any) => {\n        return tooltip.style(\"visibility\", \"visible\").html(`\n            <b>Gender</b>: ${l.gender}\n            <br/>\n            <b>Deaths</b>: ${l.count}\n        `).style(\"top\", (_.clientY)+\"px\").style(\"left\",(_.clientX)+\"px\")\n    }\n\n    const mouseOut = () => tooltip.style(\"visibility\", \"hidden\");\n\n    const draw = () => {\n        const chart = d3.selectAll('#death-gender svg')\n        chart.selectAll('g').remove();\n        chart.selectAll('.bar').remove();\n        //@ts-ignore\n        const chartWidth = chart.node().getBoundingClientRect().width - 90;\n\n        var g =  d3.selectAll('#death-gender svg')\n               .attr(\"transform\", \"translate(\" + 60 + \",\" + 30 + \")\");\n\n        xScale.domain(deaths.map((d) => d.gender.toString() ));\n        yScale.domain([0, d3.max(deaths, (d) => d.count as any )]);\n\n        g.append(\"g\")\n         .attr(\"transform\", \"translate(0,\" + height + \")\")\n         .call(d3.axisBottom(xScale))\n         .append(\"text\")\n         .attr(\"y\", height)\n         .attr(\"x\", chartWidth - 100)\n         .attr(\"text-anchor\", \"end\")\n\n        g.append(\"g\")\n         .call(d3.axisLeft(yScale).tickFormat(function(d){\n             return d as any;\n         })\n         .ticks(5))\n         .append(\"text\")\n         .attr(\"transform\", \"rotate(-90)\")\n         .attr(\"y\", 4)\n         .attr(\"dy\", \"-5.1em\")\n         .attr(\"text-anchor\", \"end\")\n         .attr(\"stroke\", \"black\")\n        //  .text(\"Death Count\");\n\n        g.selectAll(\".bar\")\n            .data(deaths)\n            .enter().append(\"rect\")\n            .attr(\"class\", \"bar\")\n            .attr(\"x\", function(d) { return xScale(d.gender.toString()) as any; })\n            .attr(\"y\", function(d) { return yScale(d.count); })\n            .attr(\"width\", xScale.bandwidth())\n            .attr(\"height\", function(d) { return height - yScale(d.count); }).attr('fill', '#DC3220')\n            .on(\"mouseenter\", mouseOver)\n            .on(\"mouseleave\", mouseOut) as any;\n    }\n\n    useEffect(() => {\n        draw();\n        \n        d3.select(window)\n            .on(\"resize\", function() {\n                draw();\n            });\n    },[deaths]);\n\n    return (\n        <>\n            <div id=\"tooltip-there\" style={{zIndex: 1}}></div>\n            <div id=\"death-gender\" style={{ overflow: 'visible' }}>\n                <svg width=\"100%\" style={{ overflow: 'visible' }}>\n                </svg>\n            </div>\n        </>\n        \n    )\n}\n\nexport default DeathsByGender;","/Users/spaul/dev/london/my-app/src/State/Date.tsx",[],[],"/Users/spaul/dev/london/my-app/src/DeathChartDeaths.ts",[],[],"/Users/spaul/dev/data-viz-project-2/src/index.tsx",[],[],"/Users/spaul/dev/data-viz-project-2/src/App.tsx",["137"],[],"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Header from './Navbar';\nimport Navbar from './Navbar';\n\nconst DrawerHeader = styled('div')(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'flex-end',\n  padding: theme.spacing(0, 1),\n  // necessary for content to be below app bar\n  ...theme.mixins.toolbar,\n}));\n\n\nexport default function App() {\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <Navbar/>\n      <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\n        <DrawerHeader />\n        <Typography paragraph>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n          tempor incididunt ut labore et dolore magna aliqua. Rhoncus dolor purus non\n          enim praesent elementum facilisis leo vel. Risus at ultrices mi tempus\n          imperdiet. Semper risus in hendrerit gravida rutrum quisque non tellus.\n          Convallis convallis tellus id interdum velit laoreet id donec ultrices.\n          Odio morbi quis commodo odio aenean sed adipiscing. Amet nisl suscipit\n          adipiscing bibendum est ultricies integer quis. Cursus euismod quis viverra\n          nibh cras. Metus vulputate eu scelerisque felis imperdiet proin fermentum\n          leo. Mauris commodo quis imperdiet massa tincidunt. Cras tincidunt lobortis\n          feugiat vivamus at augue. At augue eget arcu dictum varius duis at\n          consectetur lorem. Velit sed ullamcorper morbi tincidunt. Lorem donec massa\n          sapien faucibus et molestie ac.\n        </Typography>\n        <Typography paragraph>\n          Consequat mauris nunc congue nisi vitae suscipit. Fringilla est ullamcorper\n          eget nulla facilisi etiam dignissim diam. Pulvinar elementum integer enim\n          neque volutpat ac tincidunt. Ornare suspendisse sed nisi lacus sed viverra\n          tellus. Purus sit amet volutpat consequat mauris. Elementum eu facilisis\n          sed odio morbi. Euismod lacinia at quis risus sed vulputate odio. Morbi\n          tincidunt ornare massa eget egestas purus viverra accumsan in. In hendrerit\n          gravida rutrum quisque non tellus orci ac. Pellentesque nec nam aliquam sem\n          et tortor. Habitant morbi tristique senectus et. Adipiscing elit duis\n          tristique sollicitudin nibh sit. Ornare aenean euismod elementum nisi quis\n          eleifend. Commodo viverra maecenas accumsan lacus vel facilisis. Nulla\n          posuere sollicitudin aliquam ultrices sagittis orci a.\n        </Typography>\n      </Box>\n    </Box>\n  );\n}\n","/Users/spaul/dev/data-viz-project-2/src/useWindowSize.tsx",[],[],"/Users/spaul/dev/data-viz-project-2/src/Navbar.tsx",[],[],{"ruleId":"138","severity":1,"message":"139","line":13,"column":22,"nodeType":"140","messageId":"141","endLine":13,"endColumn":32},{"ruleId":"138","severity":1,"message":"142","line":16,"column":22,"nodeType":"140","messageId":"141","endLine":16,"endColumn":32},{"ruleId":"138","severity":1,"message":"143","line":1,"column":10,"nodeType":"140","messageId":"141","endLine":1,"endColumn":19},{"ruleId":"138","severity":1,"message":"144","line":118,"column":9,"nodeType":"140","messageId":"141","endLine":118,"endColumn":10},{"ruleId":"145","severity":1,"message":"146","line":160,"column":7,"nodeType":"147","endLine":160,"endColumn":15,"suggestions":"148"},{"ruleId":"145","severity":1,"message":"149","line":164,"column":7,"nodeType":"147","endLine":164,"endColumn":9,"suggestions":"150"},{"ruleId":"145","severity":1,"message":"151","line":28,"column":8,"nodeType":"147","endLine":28,"endColumn":10,"suggestions":"152"},{"ruleId":"145","severity":1,"message":"153","line":34,"column":22,"nodeType":"154","endLine":34,"endColumn":124},{"ruleId":"145","severity":1,"message":"155","line":35,"column":22,"nodeType":"154","endLine":35,"endColumn":124},{"ruleId":"145","severity":1,"message":"156","line":44,"column":19,"nodeType":"154","endLine":55,"endColumn":22},{"ruleId":"145","severity":1,"message":"157","line":429,"column":7,"nodeType":"147","endLine":429,"endColumn":25,"suggestions":"158"},{"ruleId":"145","severity":1,"message":"156","line":433,"column":23,"nodeType":"154","endLine":444,"endColumn":22},{"ruleId":"145","severity":1,"message":"159","line":448,"column":22,"nodeType":"160","endLine":461,"endColumn":51},{"ruleId":"138","severity":1,"message":"161","line":2,"column":41,"nodeType":"140","messageId":"141","endLine":2,"endColumn":50},{"ruleId":"138","severity":1,"message":"162","line":2,"column":52,"nodeType":"140","messageId":"141","endLine":2,"endColumn":62},{"ruleId":"138","severity":1,"message":"163","line":2,"column":64,"nodeType":"140","messageId":"141","endLine":2,"endColumn":72},{"ruleId":"138","severity":1,"message":"164","line":2,"column":93,"nodeType":"140","messageId":"141","endLine":2,"endColumn":99},{"ruleId":"145","severity":1,"message":"146","line":113,"column":7,"nodeType":"147","endLine":113,"endColumn":15,"suggestions":"165"},{"ruleId":"145","severity":1,"message":"146","line":113,"column":7,"nodeType":"147","endLine":113,"endColumn":15,"suggestions":"166"},{"ruleId":"138","severity":1,"message":"167","line":5,"column":8,"nodeType":"140","messageId":"141","endLine":5,"endColumn":14},"@typescript-eslint/no-unused-vars","'StreetType' is defined but never used.","Identifier","unusedVar","'setStreets' is assigned a value but never used.","'useEffect' is defined but never used.","'s' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.","ArrayExpression",["168"],"React Hook useEffect has a missing dependency: 'graph'. Either include it or remove the dependency array.",["169"],"React Hook useEffect has a missing dependency: 'createMap'. Either include it or remove the dependency array.",["170"],"Assignments to the 'xScale' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'yScale' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'tooltip' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useEffect has missing dependencies: 'deaths', 'pumps', 'streets', 'xScale', and 'yScale'. Either include them or remove the dependency array.",["171"],"Assignments to the 'deaths' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","TSAsExpression","'FormLabel' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.",["172"],["173"],"'Header' is defined but never used.",{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"174","fix":"182"},{"desc":"174","fix":"183"},"Update the dependencies array to be: [deaths, draw]",{"range":"184","text":"185"},"Update the dependencies array to be: [graph]",{"range":"186","text":"187"},"Update the dependencies array to be: [createMap]",{"range":"188","text":"189"},"Update the dependencies array to be: [deaths, pumps, streets, windowSize.width, xScale, yScale]",{"range":"190","text":"191"},{"range":"192","text":"185"},{"range":"193","text":"185"},[4892,4900],"[deaths, draw]",[4949,4951],"[graph]",[992,994],"[createMap]",[13323,13341],"[deaths, pumps, streets, windowSize.width, xScale, yScale]",[3504,3512],[3447,3455]]